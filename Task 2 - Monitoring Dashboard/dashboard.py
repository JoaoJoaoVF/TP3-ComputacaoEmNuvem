import streamlit as st
import json
import redis
import time
import pandas as pd

# ConfiguraÃ§Ã£o do Redis
REDIS_HOST = "192.168.121.187"  # Se estiver rodando localmente
REDIS_PORT = 6379
REDIS_KEY = "2021039654-proj3-output"

def fetch_data_from_redis():
    """Busca os dados do Redis e os converte para um dicionÃ¡rio."""
    try:
        redis_client = redis.StrictRedis(host=REDIS_HOST, port=REDIS_PORT, db=0, decode_responses=True)
        data = redis_client.get(REDIS_KEY)
        if data:
            return json.loads(data)
    except Exception as e:
        st.error(f"Erro ao conectar ao Redis: {e}")
    return {}

def main():
    """Dashboard principal."""
    st.set_page_config(page_title="Dashboard de Monitoramento", layout="wide")

    st.title("ðŸ“Š Dashboard de Monitoramento")

    placeholder = st.empty()  # Para atualizaÃ§Ã£o dinÃ¢mica

    while True:
        data = fetch_data_from_redis()
        
        if data:
            with placeholder.container():
                st.subheader("ðŸ“Œ Ãšltima AtualizaÃ§Ã£o")
                st.write(f"ðŸ•’ Timestamp: {data.get('timestamp', 'N/A')}")

                # MÃ©tricas principais
                st.subheader("ðŸ“¡ MÃ©tricas de Rede e MemÃ³ria")
                col1, col2 = st.columns(2)
                col1.metric("Percentual de EgressÃ£o de Rede", f"{data.get('percent-network-egress', 0):.2f} MB")
                col2.metric("Percentual de MemÃ³ria em Cache", f"{data.get('percent-memory-cached', 0):.2f}%")

                # Dados da CPU
                st.subheader("ðŸ’¾ MÃ©dia MÃ³vel de CPU (60s)")
                cpu_metrics = {k: v for k, v in data.items() if k.startswith("avg-util-cpu")}
                
                if cpu_metrics:
                    df_cpu = pd.DataFrame(cpu_metrics.items(), columns=["CPU", "Uso (%)"])
                    st.table(df_cpu)
                else:
                    st.write("ðŸ”´ Nenhuma informaÃ§Ã£o de CPU disponÃ­vel.")

        else:
            st.warning("âš  Nenhum dado disponÃ­vel no Redis.")

        time.sleep(5)  # Atualiza os dados a cada 5 segundos

if __name__ == "__main__":
    main()
